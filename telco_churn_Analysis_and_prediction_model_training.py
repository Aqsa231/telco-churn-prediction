# -*- coding: utf-8 -*-
"""Telco Churn Prediction model training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HFBbH9Lhu5xAbcFIeznDN9ThNGzLVkBB
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Load the dataset
df = pd.read_csv("/content/sample_data/WA_Fn-UseC_-Telco-Customer-Churn.csv")
df.head(30)

# Shape and types
df.shape

df.dtypes

df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df.columns

# checking missing values
df['TotalCharges'].isnull().sum()

df=df[df['tenure'] !=0]

df.drop(['customerID'],inplace=True,axis=1)

"""Graph se Hame Kya Pata Chala?

**Class Imbalance:**

Bar chart se direct dikh jata hai ke Churn = No waalay customers ziada hain.

Churn = Yes waalay kaafi kam hain.

Yani: Dataset imbalanced hai.

**Model Training ka Insight:**

Jab dataset imbalanced hota hai, to machine learning model sirf "No churn" predict karta rehta hai.

Is problem ko theek karne ke liye techniques use karni parti hain jaise:

SMOTE (Synthetic Minority Oversampling)

Class weighting

Precision-Recall focus

**Business Point of View:**

Agar churn walay kam hain, to:

In par focus karo

Find out kyun ja rahe hain

Retain karne ke liye offer do ya support improve karo

** Important EDA Plots**

Plot	Kya Dikhata Hai

tenure vs Churn
**bold text**
New customers churn zyada karte hain

**MonthlyCharges vs Churn	**   

High cost = zyada churn

**InternetService vs Churn**

Fiber optic churn zyada

**TechSupport vs Churn**	     

Support milne se loyalty banti hai

**Correlation matrix**     

 Churn kis se linked hai numerically
"""

#For EDA
# Class distribution
sns.countplot(x='Churn', data=df)
plt.title("Churn Count")
plt.show()

# Churn vs. Contract Type
sns.countplot(x='Contract', hue='Churn', data=df)
plt.title("Churn vs Contract Type")
plt.show()

"""Boxplot q use kia?	Numeric (tenure) vs Categorical (Churn) compare karna tha
Is plot se kya samjha?	Jitna kam tenure hoga, utna zyada churn ka chance hai
Business insight?	New customers ko retain karne ke liye onboarding improve karo ya early offers do
"""

sns.boxplot(x='Churn', y='tenure', data=df)
plt.title('Tenure vs Churn')
plt.show()

sns.boxplot(x='Churn', y='MonthlyCharges', data=df)
plt.title('Monthly Charges vs Churn')
plt.show()

df['TotalCharges_log'] = np.log1p(df['TotalCharges'])  # log(1 + x)
sns.boxplot(x='Churn', y='TotalCharges', data=df)

plt.title('Total Charges vs Churn')
plt.show()

sns.countplot(x='InternetService', hue='Churn', data=df)
plt.title('Internet Service Type vs Churn')
plt.show()

sns.countplot(x='TechSupport', hue='Churn', data=df)
plt.title('Tech Support vs Churn')
plt.show()

sns.countplot(x='Contract', hue='Churn', data=df)
plt.title('Contract Type vs Churn')
plt.show()

#plt.figure(figsize=(10, 8))sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
#plt.title("Correlation Matrix")
#plt.show()

# Encode all categorical variables
for column in df.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column])

# Split into features and target
X = df.drop('Churn', axis=1)
y = df['Churn']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#oversampling on only training data
from imblearn.over_sampling import SMOTE

sm = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = sm.fit_resample(X_train, y_train)

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train_resampled, y_train_resampled)

# Predict
y_pred = rf_model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Plot feature importance
importances = rf_model.feature_importances_
features = X.columns

feature_df = pd.DataFrame({'Feature': features, 'Importance': importances})
feature_df = feature_df.sort_values('Importance', ascending=False)

plt.figure(figsize=(10,6))
sns.barplot(x='Importance', y='Feature', data=feature_df)
plt.title("Feature Importance (Random Forest)")
plt.show()

